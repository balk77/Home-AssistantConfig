# This is a minimal example configuration that does just basic things.
# If you want to have further control over your heatings, use open window
# detection, set temperature based on entity states etc., please see the
# full example below.
heaty_minimal:
  # Obligatory settings that tell appdaemon where to find the app.
  # You shouldn't need to change these two.
  module: hass_apps_loader
  class: HeatyApp

  rooms:

    # Define such a block for each room you want to control.
    # zolder:
    #   thermostats:
    #     climate.kamer_dide:
    #       opmode_heat: "on"
    #       # opmode_off: "off"
    #       set_temp_retries: 10
    #       # How many seconds to wait before retrying.
    #       # (default: 30)
    #       set_temp_retry_interval: 30
    #     climate.kamer_fien:
    #       opmode_heat: "on"
    #       # opmode_off: "off"
    #       set_temp_retries: 10
    #       # How many seconds to wait before retrying.
    #       # (default: 30)
    #       set_temp_retry_interval: 30
    #   schedule:
    #   # From Monday to Friday, set temperature to 20.5 °C from 7.45 am
    #   # to 10.00 pm.
    #   #- { temp: 18, start: "6:30", end: "8:00", weekdays: 1-5 }
    #   #- { temp: 18, start: "6:30", end: "8:00", weekdays: 6,7 }
    #   - { temp: 18, start: "17:00", end: "19:00", weekdays: 1-7 }
    #   # On weekends, set temperature to 20.5 °C from 8.15 am to 11.30 pm.
    #   #- { temp: 20.5, start: "08:15", end: "23:30", weekdays: "6,7" }
    #   # At all other times, set temperature to 16 °C.
    #   - { temp: 13 }

    # kitchen:
    #   thermostats:
    #     climate.heating_kitchen:
    #   schedule:
      # ...


# # Full configuration example
# heaty_full:
#   # Obligatory settings that tell appdaemon where to find the app.
#   # You shouldn't need to change these two.
#   module: hass_apps_loader
#   class: HeatyApp

#   # An unique id that identifies this instance of Heaty.
#   # This is just needed if you plan to run multiple Heaty instances
#   # on a single Home Assistant instance.
#   # If set, the id has to be passed with every heaty_* event you emit
#   # for Heaty to be able to determine the instance the event is
#   # intended for.
#   # (default: "default")
#   #heaty_id: default

#   # Enable debugging output
#   # (default: false)
#   #debug: false

#   # This switch can be used to turn off all rooms (e.g. for vacation times).
#   # You may use any switch that has the states "on" and "off".
#   # (default: none)
#   #master_switch: input_boolean.heating_master

#   # Temperature that should be set when the master switch is turned off.
#   # 4 °C is recommended to protect against frost-induced damage.
#   # A value of "OFF" will set the thermostat's operation mode
#   # to <opmode_off> explicitly.
#   # (default: "OFF")
#   #master_off_temp: "OFF"

#   # Temperature that should be set when a window is opened.
#   # 4 °C is recommended to protect against frost-induced damage.
#   # A value of "OFF" will set the thermostat's operation mode
#   # to <opmode_off> explicitly.
#   # (default: "OFF")
#   #window_open_temp: "OFF"

#   # By default, Heaty applies schedules at startup so that all rooms
#   # are set to their configured temperatures. When disabling this
#   # setting, initial temperatures won't be changed until the next
#   # scheduled temperature change occurs.
#   # (default: true)
#   #reschedule_at_startup: true

#   # If you enable this option, potentially harmful temperature
#   # expressions received in a heaty_set_temp event are evaluated.
#   # For more information, please see README.rst.
#   # (default: false)
#   #untrusted_temp_expressions: false

#   # Here you can define Python modules that should be available from
#   # inside your temperature expressions. These modules are imported
#   # upon Heaty's initialization, hence you have to restart AppDaemon
#   # after making changes to these modules.
#   # (default: {})
#   temp_expression_modules:
#     #math:
#     #my_custom_module:
#       # Optionally, define an alternative name under which the module
#       # should be available.
#       # (default: <original module name>)
#       #as: alt_name

#   # In the following config block, you may define settings that affect
#   # all thermostats in your setup. These can be overwritten on a per
#   # thermostat basis.
#   # (default: {})
#   thermostat_defaults:

#     # An alternative friendly name to display in logs.
#     # (optional)
#     #friendly_name: Thermo

#     # Delta that is added to the temperature value sent to this
#     # thermostat in order to correct potential inaccuracies of
#     # the temperature sensor.
#     # (default: 0)
#     #delta: 0

#     # The minimum/maximum temperature the thermostat supports.
#     # If a temperature lower than min_temp is going to be set, the
#     # operation mode will be switched off instead of setting the
#     # temperature. A temperature setting higher than max_temp causes
#     # max_temp to be set instead.
#     # (default: null, which means there is no limitation)
#     #min_temp: null
#     #max_temp: null

#     # When this is set to something different than "OFF", Heaty will
#     # rewrite the value OFF into this temperature before sending it to
#     # the thermostat. You can set it to 4.0 degrees (if your thermostat
#     # supports this low value) in order to prevent frost-induced damage
#     # to your heating setup.
#     # (default: "OFF")
#     #off_temp: "OFF"

#     # This setting tells Heaty how often it should retry sending
#     # a temperature to the thermostat. If the thermostat reports
#     # the set temperature back, no further retry is made.
#     # You may find this useful if the connection between Home
#     # Assistant and your thermostat is unreliable.
#     # Set to 0 in order to disable retrying. -1 removes the limit
#     # and causes the temperature to be re-sent until the thermostat
#     # reports it back in its state (avoid this).
#     # (default: 10)
#     #set_temp_retries: 10
#     # How many seconds to wait before retrying.
#     # (default: 30)
#     #set_temp_retry_interval: 30

#     # Set this to false if your thermostat doesn't support operation modes.
#     # Please note that you won't be able to turn it off completely without
#     # operation mode support.
#     # (default: true)
#     #supports_opmodes: true

#     # Set this to false if your thermostat doesn't support setpoints.
#     # Please note that you will only be able to turn it on and off
#     # without temperature support. In this case, the temperature you
#     # configure in your schedule doesn't matter. Any value different
#     # from OFF will turn the thermostat on.
#     # Additionally, a thermostat with disabled temperature support
#     # will neither trigger the change replication nor the delayed
#     # re-scheduling feature.
#     # (default: true)
#     #supports_temps: true

#     # These two settings can be used to tweak the names of the
#     # operation modes.
#     # (default: heat)
#     #opmode_heat: heat
#     # (default: "off")
#     #opmode_off: "off"

#     # You might want to use an alternative service that receives
#     # the operation mode name.
#     # (default: climate/set_operation_mode)
#     #opmode_heat_service: climate/set_operation_mode
#     #opmode_off_service: climate/set_operation_mode
#     # Set to null in order to omit the operation mode from the service call.
#     # (default: operation_mode)
#     #opmode_heat_service_attr: operation_mode
#     #opmode_off_service_attr: operation_mode
#     # Entity attribute that holds the name of the current operation mode.
#     # This is used to detect manual temperature adjustments, provide
#     # correct temperature values on startup and notice that a
#     # thermostat picked up temperature changes.
#     # (default: operation_mode)
#     #opmode_state_attr: operation_mode

#     # You might want to use an alternative service that receives
#     # the target temperature value.
#     # (default: climate/set_temperature)
#     #target_temp_service: climate/set_temperature
#     # (default: temperature)
#     #target_temp_service_attr: temperature
#     # Entity attribute that holds the current target temperature.
#     # This is used to detect manual temperature adjustments, provide
#     # correct temperature values on startup and notice that a
#     # thermostat picked up temperature changes.
#     # (default: temperature)
#     #target_temp_state_attr: temperature

#     # Entity attribute that holds the current temperature as measured
#     # by the thermostat's temperature sensor.
#     # This is used for calculating the statistical temp_delta value. If
#     # your thermostat doesn't support this feature, set the value to null
#     # in order to disable it.
#     # (default: current_temperature)
#     #current_temp_state_attr: current_temperature

#   # In the following config block, you may define settings that affect
#   # all window sensors in your setup. These can be overwritten on a per
#   # sensor basis.
#   window_sensor_defaults:

#     # An alternative friendly name to display in logs.
#     # (optional)
#     #friendly_name: Window

#     # Sensor state needs to stay constant for this number of seconds
#     #  before the window open/closed detection kicks in.
#     # (default: 10)
#     #delay: 10

#     # By default, a state of "on" means open.
#     # If your sensor reports differently, you need to adjust this setting.
#     # If multiple states should be considered as open, specify a list
#     # of states instead.
#     # (default: "on")
#     #open_state: "on"
#     #open_state: [1, "on"]

#   # Add schedule rules you want to have prepended to each room's schedule
#   # automatically here.
#   # (default: [])
#   schedule_prepend:

#   # Add schedule rules you want to have appended to each room's schedule
#   # automatically here.
#   # (default: [])
#   schedule_append:

#   # Optionally, configure schedules that can be included by temperature
#   # expressions dynamically. See the README.rst for an example on how
#   # to use them.
#   # (default: {})
#   schedule_snippets:
#     #summer:
#     # ...

#   # Configure your rooms here.
#   # (default: {})
#   rooms:

#     # Create such a block for every room you want to control.
#     living:
#       # An alternative friendly name to display in logs.
#       # (optional)
#       #friendly_name: Living Room

#       # This setting controls whether changes made locally at one thermostat
#       # should automatically be replicated at the other ones in this
#       # particular room.
#       # (default: true)
#       #replicate_changes: true

#       # Set this value to a number of minutes and Heaty will automatically
#       # re-schedule the temperature after a manual change has been made.
#       # If you, for instance, change the target temperature at one of your
#       # thermostats and this value is set to 120, Heaty will again apply
#       # the schedule 2 hours after you made the change.
#       # (default: 0, which means never re-schedule)
#       #reschedule_delay: 0

#       # All thermostats of this room go here.
#       # (default: {})
#       thermostats:

#         climate.living1:
#           # We could, for instance, overwrite the delta defined in the
#           # defaults, if any, for this particular thermostat only.
#           delta: 1.0

#         climate.living_2:
#           # ...

#       # Window open/closed detection
#       # (default: {})
#       window_sensors:

#         # Create a sensor item for each window sensor you want to consider
#         # and overwrite default parameters if needed.
#         # A window sensor may be any sensor that changes states when
#         # window is opened/closed..
#         binary_sensor.window_living:
#           open_state: open

#       # Schedule for this room.
#       # The explanation of schedules is far too detailled for this file.
#       # Please consult the docs.
#       # (default: [])
#       schedule:
#         # ...

#   # Configure zones for collecting statistical data here.
#   # A zone is a group of one or more rooms that generates statistics about
#   # the heating in these rooms and sends them to Home Assistant as sensor
#   # entities.
#   # Please consult the docs for more information.
#   # (default: {})
#   statistics:

#     # Define such a block for each zone you want to create.
#     upstairs:

#       # An alternative friendly name to display in logs.
#       # (optional)
#       #friendly_name: Upstairs zone

#       # The names (not the friendly names) of the rooms in that zone go here.
#       # (default: {})
#       rooms:
#         bathroom:
#         kidsroom:

#       # Configure which parameters to collect.
#       # By default, no parameters are enabled. See the docs for a list
#       # of supported parameters and how to configure them.
#       # (default: {})
#       #parameters:
#       #  temp_delta: